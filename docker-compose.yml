version: '3.8'

services:
  # Angular application service
  message-front:
    build:
      context: ./message-front # Build context points to the message-front folder
      dockerfile: Dockerfile   # Dockerfile name in the folder
    container_name: message-front-app
    ports:
      - "8080:80"              # Map port 8080 on the host to port 80 in the container
    environment:
      - API_URL=http://localhost:8081    # Example environment variable
    networks:
      - backend
    restart: unless-stopped    # Restart policy for the container
    depends_on:
      - spring-app

  # Spring Boot application service
  spring-app:
    image: spring-app:latest   # Use the name of your image or 'build' if building it in the compose file
    build:
      context: .               # Build the Dockerfile in the current directory
      dockerfile: Dockerfile    # Dockerfile name if different
    ports:
      - "8081:8081"             # Map the application port
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/messages?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=W6o6aOirRdDuxCk
      - IBM_MQ_QUEUE_MANAGER=506762a034e5
      - IBM_MQ_CHANNEL=DEV.APP.SVRCONN
      - IBM_MQ_CONN_NAME=localhost(1414),127.0.0.1(1414),ibmmq(1414)
      - IBM_MQ_USER=app
      - IBM_MQ_PASSWORD=passw0rd
      - IBM_MQ_QUEUE=TEST.QUEUE
    networks:
      - backend
      - mq-network
    depends_on:
      - mysql                  # Wait for MySQL service before starting the Spring Boot app
      - ibmmq                  # Wait for IBM MQ service before starting the Spring Boot app

  # MySQL service
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: W6o6aOirRdDuxCk
      MYSQL_DATABASE: messages
      MYSQL_USER: root
      MYSQL_PASSWORD:
    ports:
      - "3306:3306"             # Expose MySQL port to localhost (if needed)
    volumes:
      - mysql-data:/var/lib/mysql  # Persist data on the host system
    networks:
      - backend                 # Ensure both services are on the same network

  # IBM MQ service (JMS broker)
  ibmmq:
    image: ibmcom/mq:latest    # Official IBM MQ Docker image
    environment:
      - LICENSE=accept        # Accept the license for IBM MQ
      - MQ_QMGR=QM1           # Set the queue manager name
      - MQ_ADMIN_PASSWORD=passw0rd # Set the 'admin' password
      - MQ_APP_PASSWORD=passw0rd # Set the 'app' password
      - MQ_ADMIN_USER=admin   # Set the admin user
      - MQ_APP_CHANNEL=DEV.APP.SVRCONN
    ports:
      - "1414:1414"  # IBM MQ client connection port
      - "9443:9443"  # Web console port for IBM MQ (optional)
    volumes:
      - qm1data:/mnt/mqm
    networks:
      - mq-network         # Ensure both services are on the same network

# Define networks and volumes for the services
networks:
  backend:
    driver: bridge
  mq-network:
    driver: bridge

volumes:
  mysql-data:
    driver: local
  qm1data:
    driver: local
